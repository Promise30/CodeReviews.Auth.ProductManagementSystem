// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(PmsDbContext))]
    partial class PmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2024, 5, 20, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2939),
                            IsActive = false,
                            Name = "IPhone 15 Pro Max 512GB",
                            Price = 2999.9899999999998
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2024, 6, 1, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2947),
                            IsActive = false,
                            Name = "Samsung Galaxy S23 Ultra 256GB",
                            Price = 1399.99
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2024, 5, 14, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2949),
                            IsActive = true,
                            Name = "Google Pixel 7 Pro 128GB",
                            Price = 999.99000000000001
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2024, 6, 3, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2951),
                            IsActive = false,
                            Name = "Sony Bravia 65\" 4K TV",
                            Price = 1499.99
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2024, 6, 4, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2953),
                            IsActive = false,
                            Name = "Bose QuietComfort 35 II Headphones",
                            Price = 299.99000000000001
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2024, 5, 27, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2956),
                            IsActive = false,
                            Name = "Apple MacBook Pro 16\" 1TB",
                            Price = 2499.9899999999998
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(2024, 6, 9, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2958),
                            IsActive = false,
                            Name = "Samsung Galaxy Tab S8 256GB",
                            Price = 799.99000000000001
                        },
                        new
                        {
                            Id = 8,
                            DateAdded = new DateTime(2024, 5, 25, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2959),
                            IsActive = false,
                            Name = "Canon EOS R5 Mirrorless Camera",
                            Price = 3899.9899999999998
                        },
                        new
                        {
                            Id = 9,
                            DateAdded = new DateTime(2024, 5, 18, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2961),
                            IsActive = false,
                            Name = "Sony WH-1000XM4 Wireless Headphones",
                            Price = 349.99000000000001
                        },
                        new
                        {
                            Id = 10,
                            DateAdded = new DateTime(2024, 5, 28, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2964),
                            IsActive = false,
                            Name = "Microsoft Surface Laptop 4 512GB",
                            Price = 1599.99
                        },
                        new
                        {
                            Id = 11,
                            DateAdded = new DateTime(2024, 5, 30, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2965),
                            IsActive = true,
                            Name = "Dell XPS 13 1TB",
                            Price = 1899.99
                        },
                        new
                        {
                            Id = 12,
                            DateAdded = new DateTime(2024, 5, 17, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2966),
                            IsActive = false,
                            Name = "Amazon Echo Show 10",
                            Price = 249.99000000000001
                        },
                        new
                        {
                            Id = 13,
                            DateAdded = new DateTime(2024, 6, 4, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2968),
                            IsActive = true,
                            Name = "GoPro HERO9 Black",
                            Price = 399.99000000000001
                        },
                        new
                        {
                            Id = 14,
                            DateAdded = new DateTime(2024, 5, 14, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2969),
                            IsActive = false,
                            Name = "Apple Watch Series 7",
                            Price = 499.99000000000001
                        },
                        new
                        {
                            Id = 15,
                            DateAdded = new DateTime(2024, 5, 27, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2971),
                            IsActive = false,
                            Name = "HP Envy 6055 All-in-One Printer",
                            Price = 129.99000000000001
                        },
                        new
                        {
                            Id = 16,
                            DateAdded = new DateTime(2024, 6, 4, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2972),
                            IsActive = false,
                            Name = "LG 27\" 4K UltraFine Monitor",
                            Price = 699.99000000000001
                        },
                        new
                        {
                            Id = 17,
                            DateAdded = new DateTime(2024, 5, 19, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2974),
                            IsActive = true,
                            Name = "Fitbit Charge 5",
                            Price = 179.99000000000001
                        },
                        new
                        {
                            Id = 18,
                            DateAdded = new DateTime(2024, 5, 12, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2976),
                            IsActive = false,
                            Name = "Nintendo Switch OLED Model",
                            Price = 349.99000000000001
                        },
                        new
                        {
                            Id = 19,
                            DateAdded = new DateTime(2024, 5, 30, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2977),
                            IsActive = false,
                            Name = "DJI Mavic Air 2 Drone",
                            Price = 799.99000000000001
                        },
                        new
                        {
                            Id = 20,
                            DateAdded = new DateTime(2024, 5, 18, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2979),
                            IsActive = true,
                            Name = "JBL Flip 5 Bluetooth Speaker",
                            Price = 119.98999999999999
                        },
                        new
                        {
                            Id = 21,
                            DateAdded = new DateTime(2024, 5, 22, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2980),
                            IsActive = true,
                            Name = "Apple AirPods Pro",
                            Price = 249.99000000000001
                        },
                        new
                        {
                            Id = 22,
                            DateAdded = new DateTime(2024, 5, 20, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2982),
                            IsActive = false,
                            Name = "Razer Blade 15 Gaming Laptop",
                            Price = 2199.9899999999998
                        },
                        new
                        {
                            Id = 23,
                            DateAdded = new DateTime(2024, 5, 25, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2983),
                            IsActive = false,
                            Name = "Logitech MX Master 3 Mouse",
                            Price = 99.989999999999995
                        },
                        new
                        {
                            Id = 24,
                            DateAdded = new DateTime(2024, 6, 6, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2984),
                            IsActive = true,
                            Name = "Sony PlayStation 5",
                            Price = 499.99000000000001
                        },
                        new
                        {
                            Id = 25,
                            DateAdded = new DateTime(2024, 5, 26, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2986),
                            IsActive = false,
                            Name = "Xbox Series X",
                            Price = 499.99000000000001
                        },
                        new
                        {
                            Id = 26,
                            DateAdded = new DateTime(2024, 5, 12, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2987),
                            IsActive = false,
                            Name = "Samsung Galaxy Watch 4",
                            Price = 249.99000000000001
                        },
                        new
                        {
                            Id = 27,
                            DateAdded = new DateTime(2024, 5, 27, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2989),
                            IsActive = false,
                            Name = "Garmin Forerunner 945",
                            Price = 599.99000000000001
                        },
                        new
                        {
                            Id = 28,
                            DateAdded = new DateTime(2024, 5, 16, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2990),
                            IsActive = true,
                            Name = "Acer Predator Helios 300 Gaming Laptop",
                            Price = 1499.99
                        },
                        new
                        {
                            Id = 29,
                            DateAdded = new DateTime(2024, 5, 19, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2992),
                            IsActive = true,
                            Name = "LG Gram 17\" Laptop 1TB",
                            Price = 1699.99
                        },
                        new
                        {
                            Id = 30,
                            DateAdded = new DateTime(2024, 6, 1, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2994),
                            IsActive = true,
                            Name = "Apple iPad Pro 12.9\" 256GB",
                            Price = 1099.99
                        },
                        new
                        {
                            Id = 31,
                            DateAdded = new DateTime(2024, 5, 13, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2995),
                            IsActive = false,
                            Name = "Sony Alpha a7 III Mirrorless Camera",
                            Price = 1999.99
                        },
                        new
                        {
                            Id = 32,
                            DateAdded = new DateTime(2024, 6, 3, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2997),
                            IsActive = false,
                            Name = "Nikon Z6 II Mirrorless Camera",
                            Price = 1799.99
                        },
                        new
                        {
                            Id = 33,
                            DateAdded = new DateTime(2024, 5, 19, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(2998),
                            IsActive = true,
                            Name = "Canon PowerShot G7 X Mark III",
                            Price = 749.99000000000001
                        },
                        new
                        {
                            Id = 34,
                            DateAdded = new DateTime(2024, 5, 24, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3001),
                            IsActive = true,
                            Name = "Fujifilm X-T4 Mirrorless Camera",
                            Price = 1699.99
                        },
                        new
                        {
                            Id = 35,
                            DateAdded = new DateTime(2024, 6, 9, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3003),
                            IsActive = false,
                            Name = "Panasonic Lumix GH5",
                            Price = 1399.99
                        },
                        new
                        {
                            Id = 36,
                            DateAdded = new DateTime(2024, 5, 31, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3005),
                            IsActive = false,
                            Name = "Olympus OM-D E-M1 Mark III",
                            Price = 1799.99
                        },
                        new
                        {
                            Id = 37,
                            DateAdded = new DateTime(2024, 5, 26, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3006),
                            IsActive = true,
                            Name = "Sony RX100 VII",
                            Price = 1299.99
                        },
                        new
                        {
                            Id = 38,
                            DateAdded = new DateTime(2024, 5, 12, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3008),
                            IsActive = true,
                            Name = "GoPro MAX",
                            Price = 499.99000000000001
                        },
                        new
                        {
                            Id = 39,
                            DateAdded = new DateTime(2024, 5, 31, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3009),
                            IsActive = false,
                            Name = "DJI Osmo Action",
                            Price = 329.99000000000001
                        },
                        new
                        {
                            Id = 40,
                            DateAdded = new DateTime(2024, 6, 9, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3011),
                            IsActive = true,
                            Name = "Insta360 ONE R Twin Edition",
                            Price = 479.99000000000001
                        },
                        new
                        {
                            Id = 41,
                            DateAdded = new DateTime(2024, 5, 23, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3012),
                            IsActive = true,
                            Name = "Microsoft Surface Pro 7",
                            Price = 899.99000000000001
                        },
                        new
                        {
                            Id = 42,
                            DateAdded = new DateTime(2024, 6, 1, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3014),
                            IsActive = false,
                            Name = "Apple Mac Mini M1",
                            Price = 699.99000000000001
                        },
                        new
                        {
                            Id = 43,
                            DateAdded = new DateTime(2024, 5, 26, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3015),
                            IsActive = true,
                            Name = "HP Spectre x360 14",
                            Price = 1599.99
                        },
                        new
                        {
                            Id = 44,
                            DateAdded = new DateTime(2024, 6, 2, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3017),
                            IsActive = true,
                            Name = "Asus ZenBook Duo 14",
                            Price = 1299.99
                        },
                        new
                        {
                            Id = 45,
                            DateAdded = new DateTime(2024, 5, 27, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3018),
                            IsActive = false,
                            Name = "Lenovo ThinkPad X1 Carbon",
                            Price = 1799.99
                        },
                        new
                        {
                            Id = 46,
                            DateAdded = new DateTime(2024, 5, 22, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3019),
                            IsActive = false,
                            Name = "Acer Swift 3",
                            Price = 699.99000000000001
                        },
                        new
                        {
                            Id = 47,
                            DateAdded = new DateTime(2024, 5, 30, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3021),
                            IsActive = false,
                            Name = "Razer Book 13",
                            Price = 1499.99
                        },
                        new
                        {
                            Id = 48,
                            DateAdded = new DateTime(2024, 5, 12, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3022),
                            IsActive = false,
                            Name = "Dell Inspiron 15 7000",
                            Price = 899.99000000000001
                        },
                        new
                        {
                            Id = 49,
                            DateAdded = new DateTime(2024, 5, 25, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3024),
                            IsActive = false,
                            Name = "MSI Stealth 15M",
                            Price = 1399.99
                        },
                        new
                        {
                            Id = 50,
                            DateAdded = new DateTime(2024, 5, 24, 8, 32, 15, 597, DateTimeKind.Utc).AddTicks(3026),
                            IsActive = true,
                            Name = "Gigabyte Aero 15",
                            Price = 1799.99
                        });
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0843560c-3ab4-44c0-87f4-3062ad369487",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83dc1995-6996-46d6-a7a8-10e67674b295",
                            Email = "test1@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 1",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd5e4d78-4033-44c8-aaca-b64a4ce6e1a1",
                            TwoFactorEnabled = false,
                            UserName = "test1@test.com"
                        },
                        new
                        {
                            Id = "c826136d-a2bd-4649-8b44-cb835364495a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6173bd84-1088-409d-b64e-c581a0a38342",
                            Email = "test2@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 2",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6247bdf7-3d40-4197-93ae-2bdddbd87839",
                            TwoFactorEnabled = false,
                            UserName = "test2@test.com"
                        },
                        new
                        {
                            Id = "24d0a153-8c5d-42bb-9373-ae617d025f36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0355bb5-b23f-4038-b049-ceab8bc11dd7",
                            Email = "test3@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 3",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2394530a-cb2a-4129-8d0e-b838044fe048",
                            TwoFactorEnabled = false,
                            UserName = "test3@test.com"
                        },
                        new
                        {
                            Id = "fb696696-2ece-4fda-805c-75ec01680159",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a5e7dc8-9942-4b98-a38f-7e15bb125f94",
                            Email = "test4@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 4",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1597c7f6-d438-4da1-8d35-59a32373d455",
                            TwoFactorEnabled = false,
                            UserName = "test4@test.com"
                        },
                        new
                        {
                            Id = "3095ae0b-fdba-4461-aead-0bb1760e8944",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "568f0f4c-bb82-4539-accc-19b58641d232",
                            Email = "test5@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 5",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e09fc5d-470c-4ee4-b1db-0d25b11b3219",
                            TwoFactorEnabled = false,
                            UserName = "test5@test.com"
                        },
                        new
                        {
                            Id = "66bf31f2-31c0-4e59-a96f-83c03619ac10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec728f0d-e4f8-40cf-9c00-cedfb0511cf6",
                            Email = "test6@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 6",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a148f717-ab9b-48f1-9b15-9ef6ce1b67da",
                            TwoFactorEnabled = false,
                            UserName = "test6@test.com"
                        },
                        new
                        {
                            Id = "878817ba-7da4-4f19-bac5-d9df4fe4030d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ace06ffb-cd88-424a-9478-79a6a10eb199",
                            Email = "test7@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 7",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c326deb-fc30-4063-9de8-7b6a2323debe",
                            TwoFactorEnabled = false,
                            UserName = "test7@test.com"
                        },
                        new
                        {
                            Id = "39f8b94c-abd0-44b6-a218-eba6a34cd4aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48c9cb02-b4d3-4b40-a086-323f835c779d",
                            Email = "test8@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 8",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb825bb7-a2e1-4bba-9c85-355f4292fb33",
                            TwoFactorEnabled = false,
                            UserName = "test8@test.com"
                        },
                        new
                        {
                            Id = "94552052-34ed-447d-9a71-81e1bebb6b77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0464f2d4-2d9e-49fc-b27c-d3d536b27d4c",
                            Email = "test9@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 9",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30fa9e68-353f-42fc-ae04-5cec8ef48510",
                            TwoFactorEnabled = false,
                            UserName = "test9@test.com"
                        },
                        new
                        {
                            Id = "76c86596-8a86-42af-8e51-54131a9d6b58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31d48e31-d0ca-4eb0-9065-f844d99bd56b",
                            Email = "test10@test.com",
                            EmailConfirmed = false,
                            FirstName = "User 10",
                            LastName = "Seeded",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc461b04-3587-4fa6-8668-bb306569b683",
                            TwoFactorEnabled = false,
                            UserName = "test10@test.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
